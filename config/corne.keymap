/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&led_strip { chain-length = <27>; };

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            bindings = <&mo 3>, <&to 3>;
        };

        td2: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_2";
            #binding-cells = <0>;
            bindings = <&mo 2>, <&mo 3>, <&mo 5>;
        };

        volume_btn: volume_btn {
            compatible = "zmk,behavior-hold-tap";
            label = "VOLUME_BTN";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        game_lyr: game_lyr {
            compatible = "zmk,behavior-tap-dance";
            label = "GAME_LYR";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&to 1>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <16 19>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp BACKSPACE                          &kp Q           &kp W       &kp E        &kp R        &kp T        &kp Y  &kp U        &kp I        &kp O       &kp P     &kp BSPC
&kp TAB                                &hm LEFT_GUI A  &hm LALT S  &hm LCTRL D  &hm LSHFT F  &kp G        &kp H  &hm RSHFT J  &hm RCTRL K  &hm RALT L  &kp SEMI  &kp ENTER
&volume_btn C_VOLUME_DOWN C_VOLUME_UP  &kp Z           &kp X       &kp C        &kp V        &kp B        &kp N  &kp M        &kp COMMA    &kp DOT     &kp FSLH  &game_lyr
                                                                   &mo 5        &td2         &kp ENTER    &td1   &kp SPACE    &kp DELETE
            >;

            label = "Home";
        };

        game_layer {
            bindings = <
&kp ESC         &kp Q  &kp W  &kp E         &kp R      &kp T        &kp Y  &kp U   &kp I      &kp O    &kp P     &kp BSPC
&kp TAB         &kp A  &kp S  &kp D         &kp F      &kp G        &kp H  &kp J   &kp K      &kp L    &kp SEMI  &trans
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C         &kp V      &kp B        &kp N  &kp M   &kp COMMA  &kp DOT  &kp FSLH  &to 0
                              &kp LEFT_ALT  &kp LCTRL  &kp SPACE    &mo 3  &trans  &trans
            >;

            label = "Game";
        };

        symbol_opt {
            bindings = <
&kp ESCAPE  &kp GRAVE  &kp LT     &kp GT    &kp DQT    &kp DOT     &kp AMPERSAND  &trans      &kp LBKT  &kp RBKT  &kp PERCENT   &trans
&kp LC(C)   &kp EXCL   &kp MINUS  &kp PLUS  &kp EQUAL  &kp HASH    &kp PIPE       &kp DOLLAR  &kp LPAR  &kp RPAR  &kp QUESTION  &trans
&kp DEL     &kp CARET  &kp UNDER  &kp STAR  &kp SLASH  &kp BSLH    &kp TILDE      &kp COLON   &kp LBRC  &kp RBRC  &kp AT        &trans
                                  &trans    &trans     &trans      &trans         &trans      &trans
            >;

            label = "Symbol Opt";
        };

        nav_num {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans  &kp HOME            &kp UP    &kp END        &kp PG_UP    &kp PLUS   &kp N7  &kp N8    &kp N9  &kp KP_MULTIPLY  &trans
&trans  &trans  &kp LEFT            &kp DOWN  &kp RIGHT      &kp PG_DN    &kp MINUS  &kp N4  &kp N5    &kp N6  &kp FSLH         &trans
&trans  &trans  &kp LA(LEFT_ARROW)  &trans    &kp LA(RIGHT)  &trans       &kp N0     &kp N1  &kp N2    &kp N3  &kp DOT          &trans
                                    &trans    &trans         &kp SPACE    &to 0      &trans  &kp RALT
            >;

            label = "Nav Num";
        };

        System {
            bindings = <
&bt BT_NXT  &kp F10  &kp F9  &kp F8  &kp F7  &trans    &rgb_ug RGB_TOG                   &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &rgb_ug RGB_EFF  &ext_power EP_ON
&bt BT_PRV  &kp F11  &kp F6  &kp F5  &kp F4  &trans    &rgb_ug RGB_COLOR_HSB(26,100,49)  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &rgb_ug RGB_EFR  &ext_power EP_OFF
&bt BT_CLR  &kp F12  &kp F3  &kp F2  &kp F1  &trans    &trans                            &trans           &trans           &trans           &trans           &to 1
                             &trans  &trans  &trans    &trans                            &trans           &trans
            >;

            label = "System";
        };

        symbol_classic {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE  &kp EXCL      &kp AT  &kp HASH    &kp DLLR  &kp PRCNT    &kp CARET         &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&kp LC(C)   &kp NUMBER_1  &kp N2  &kp N3      &kp N4    &kp N5       &kp LESS_THAN     &kp UNDER  &kp PLUS   &kp LBRC  &kp RBRC  &kp BACKSLASH
&kp LC(V)   &kp N6        &kp N7  &kp N8      &kp N9    &kp N0       &kp GREATER_THAN  &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT  &kp TILDE
                                  &kp LSHIFT  &trans    &kp SPACE    &kp RET           &trans     &kp RALT
            >;

            label = "Symbols Classic";
        };

        left_num {
            bindings = <
&trans  &kp STAR  &kp N7  &kp N8  &kp N9  &kp LS(PLUS)    &kp EQUAL  &trans  &trans  &trans  &trans  &trans
&trans  &kp FSLH  &kp N4  &kp N5  &kp N6  &kp MINUS       &trans     &trans  &trans  &trans  &trans  &trans
&trans  &kp DOT   &kp N1  &kp N2  &kp N3  &kp N0          &trans     &trans  &trans  &trans  &trans  &trans
                          &trans  &to 0   &kp ENTER       &trans     &trans  &trans
            >;

            label = "Left Num";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        system_layer_con {
            if-layers = <3 2>;
            then-layer = <4>;
        };
    };
};
